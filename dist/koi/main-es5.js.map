{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/aith-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/signup/signup.component.html","webpack:///src/app/header/header/header.component.ts","webpack:///src/app/header/header/header.component.html","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/services/auth-service/auth.service.ts","webpack:///src/app/services/posts-service/posts.service.ts","webpack:///src/app/validators/mime-type.validator.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","AppRoutingModule","forRoot","declarations","imports","providers","AppComponent","authService","title","autoAuthUser","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","bootstrap","AuthInterceptor","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getIsAuth","navigate","LoginComponent","isLoading","authStatusSub","getAuthStatusListener","subscribe","authStatus","form","invalid","login","value","email","password","unsubscribe","SignupComponent","createUser","HeaderComponent","userIsAuthenticated","authListenerSubs","isAuthenticated","logout","PostCreateComponent","postsService","enteredTitle","enteredContent","mode","validators","required","minLength","content","image","asyncValidators","paramMap","has","postId","get","getPost","postData","post","_id","imagePath","creator","setValue","console","log","event","file","target","files","patchValue","updateValueAndValidity","reader","FileReader","onload","imagePreview","result","readAsDataURL","addPost","updatePost","reset","PostListComponent","posts","totalPosts","postsPerPage","currentPage","pageSizeOptions","getPosts","userId","getUserId","postsSub","getPostUpdateListener","postCount","pageData","pageIndex","pageSize","deletePost","AuthService","http","authStatusListener","token","asObservable","authData","error","response","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","authInformation","getAuthData","clearTimeout","tokenTimer","clearAuthData","duration","setTimeout","localStorage","setItem","toISOString","removeItem","getItem","providedIn","PostsService","postsUpdated","queryParams","pipe","map","maxPosts","transformedPostData","FormData","append","responseData","put","mimeType","control","fileReader","onloadend","frObs","create","observer","addEventListener","arr","Uint8Array","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,EAErB;AAAED,UAAI,EAAE,QAAR;AAAkBC,eAAS,EAAE,4FAA7B;AAAkDC,iBAAW,EAAE,CAAC,0DAAD;AAA/D,KAFqB,EAGrB;AACEF,UAAI,EAAE,cADR;AAEEC,eAAS,EAAE,4FAFb;AAGEC,iBAAW,EAAE,CAAC,0DAAD;AAHf,KAHqB,EAQrB;AAAEF,UAAI,EAAE,OAAR;AAAiBC,eAAS,EAAE;AAA5B,KARqB,EASrB;AAAED,UAAI,EAAE,QAAR;AAAkBC,eAAS,EAAE;AAA7B,KATqB,CAAvB;;QAiBaE,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,iBAFhB,CAAC,0DAAD,C;AAAW,gBAFb,CAAC,6DAAaC,OAAb,CAAqBL,MAArB,CAAD,CAEa,EADZ,4DACY;;;;0HAEXI,gB,EAAgB;AAAA;AAAA,kBAHjB,4DAGiB;AAAA,O;AAHL,K;;;;;sEAGXA,gB,EAAgB;cAN5B,sDAM4B;eANnB;AACRE,sBAAY,EAAE,EADN;AAERC,iBAAO,EAAE,CAAC,6DAAaF,OAAb,CAAqBL,MAArB,CAAD,CAFD;AAGRF,iBAAO,EAAE,CAAC,4DAAD,CAHD;AAIRU,mBAAS,EAAE,CAAC,0DAAD;AAJH,S;AAMmB,Q;;;;;;;;;;;;;;;;;;ACzB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQaC,Y;;;AACX,4BAAoBC,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAIpB,aAAAC,KAAA,GAAQ,KAAR;AAJgD;;;;mCACrC;AACT,eAAKD,WAAL,CAAiBE,YAAjB;AACD;;;;;;;uBAJUH,Y,EAAY,gJ;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACRzB;;AACA;;AACE;;AACF;;;;;;;;;sEDKaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTI,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAsDaC,S;;;;;YAAAA,S;AAAS,kBAFR,4DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBALT,CACT;AAAEC,eAAO,EAAE,uEAAX;AAA8BC,gBAAQ,EAAE,uEAAxC;AAAyDC,aAAK,EAAE;AAAhE,OADS,C;AAEV,gBAlBQ,CACP,uEADO,EAEP,qEAFO,EAGP,kEAHO,EAIP,0DAJO,EAKP,4FALO,EAMP,sEANO,EAOP,oEAPO,EAQP,wEARO,EASP,0EATO,EAUP,8EAVO,EAWP,2FAXO,EAYP,+EAZO,EAaP,yEAbO,EAcP,sEAdO,CAkBR;;;;0HAGUH,S,EAAS;AAAA,uBA5BlB,4DA4BkB,EA3BlB,6FA2BkB,EA1BlB,gFA0BkB,EAzBlB,uFAyBkB,EAxBlB,8EAwBkB,EAvBlB,2EAuBkB;AAvBJ,kBAGd,uEAHc,EAId,qEAJc,EAKd,kEALc,EAMd,0DANc,EAOd,4FAPc,EAQd,sEARc,EASd,oEATc,EAUd,wEAVc,EAWd,0EAXc,EAYd,8EAZc,EAad,2FAbc,EAcd,+EAdc,EAed,yEAfc,EAgBd,sEAhBc;AAuBI,O;AAPF,K;;;;;sEAOPA,S,EAAS;cA9BrB,sDA8BqB;eA9BZ;AACRV,sBAAY,EAAE,CACZ,4DADY,EAEZ,6FAFY,EAGZ,gFAHY,EAIZ,uFAJY,EAKZ,8EALY,EAMZ,2EANY,CADN;AASRC,iBAAO,EAAE,CACP,uEADO,EAEP,qEAFO,EAGP,kEAHO,EAIP,0DAJO,EAKP,4FALO,EAMP,sEANO,EAOP,oEAPO,EAQP,wEARO,EASP,0EATO,EAUP,8EAVO,EAWP,2FAXO,EAYP,+EAZO,EAaP,yEAbO,EAcP,sEAdO,CATD;AAyBRC,mBAAS,EAAE,CACT;AAAES,mBAAO,EAAE,uEAAX;AAA8BC,oBAAQ,EAAE,uEAAxC;AAAyDC,iBAAK,EAAE;AAAhE,WADS,CAzBH;AA4BRC,mBAAS,EAAE,CAAC,4DAAD;AA5BH,S;AA8BY,Q;;;;;;;;;;;;;;;;;;ACjDtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAIaC,e;;;AACX,+BAAoBX,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAA4B;;;;kCAEtCrB,G,EAAuBiC,I,EAAmB;AAClD,cAAMC,SAAS,GAAG,KAAKb,WAAL,CAAiBc,QAAjB,EAAlB;AACA,cAAMC,WAAW,GAAGpC,GAAG,CAACqC,KAAJ,CAAU;AAC5BC,mBAAO,EAAEtC,GAAG,CAACsC,OAAJ,CAAYC,GAAZ,CAAgB,eAAhB,EAAiC,YAAYL,SAA7C;AADmB,WAAV,CAApB;AAIA,iBAAOD,IAAI,CAACO,MAAL,CAAYJ,WAAZ,CAAP;AACD;;;;;;;uBAVUJ,e,EAAe,uI;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe;;;;;sEAAfA,e,EAAe;cAD3B;AAC2B,Q;;;;;;;;;;;;;;;;;;;;;;ACD5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaS,S;;;AACX,yBAAoBpB,WAApB,EAAsDqB,MAAtD,EAAsE;AAAA;;AAAlD,aAAArB,WAAA,GAAAA,WAAA;AAAkC,aAAAqB,MAAA,GAAAA,MAAA;AAAkB;;;;oCAGtEC,K,EACAC,K,EAAoD;AAMpD,cAAMC,MAAM,GAAG,KAAKxB,WAAL,CAAiByB,SAAjB,EAAf;;AACA,cAAI,CAACD,MAAL,EAAa;AACX,iBAAKH,MAAL,CAAYK,QAAZ,CAAqB,CAAC,QAAD,CAArB;AACD;;AACD,iBAAOF,MAAP;AACD;;;;;;;uBAhBUJ,S,EAAS,uI,EAAA,8G;AAAA,K;;;aAATA,S;AAAS,eAATA,SAAS;;;;;sEAATA,S,EAAS;cADrB;AACqB,Q;;;;;;;;;;;;;;;;;;;;;;;;ACXtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCE;;;;;;AAaI;;AACE;;AACF;;;;;;AAaA;;AACG;;AAA6B;;;;;;AAGlC;;AACE;;AACF;;;;;;AACA;;;;;;;;AAlCF;;AAAM;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACE;;AAUA;;AAGF;;AAEA;;AACE;;AASA;;AAGF;;AACA;;AAGA;;AACF;;;;;;;;;;AAvBe;;AAAA;;AAeA;;AAAA;;AAI0C;;AAAA;;AAG1C;;AAAA;;;;QD1BJO,c;;;AAIX,8BAAmB3B,WAAnB,EAA6C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AADnB,aAAA4B,SAAA,GAAY,KAAZ;AAC+C;;;;mCAEpC;AAAA;;AACT,eAAKC,aAAL,GAAqB,KAAK7B,WAAL,CAClB8B,qBADkB,GAElBC,SAFkB,CAER,UAACC,UAAD,EAAgB;AACzB,iBAAI,CAACJ,SAAL,GAAiB,KAAjB;AACD,WAJkB,CAArB;AAKD;;;gCAEOK,I,EAAc;AACpB,cAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB;AACD;;AACD,eAAKN,SAAL,GAAiB,IAAjB;AACA,eAAK5B,WAAL,CAAiBmC,KAAjB,CAAuBF,IAAI,CAACG,KAAL,CAAWC,KAAlC,EAAyCJ,IAAI,CAACG,KAAL,CAAWE,QAApD;AACD;;;sCACa;AACZ,eAAKT,aAAL,CAAmBU,WAAnB;AACD;;;;;;;uBAvBUZ,c,EAAc,uJ;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,c;AAAA,a;AAAA,shB;AAAA;AAAA;ACV3B;;AACE;;AACA;;AAoCF;;;;AArCe;;AAAA;;AAC2C;;AAAA;;;;;;;;;sEDQ7CA,c,EAAc;cAL1B,uDAK0B;eALhB;AACTxB,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;AEV3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCE;;;;;;AAaI;;AACE;;AACF;;;;;;AAaA;;AACG;;AAA6B;;;;;;AAGlC;;AACE;;AACF;;;;;;AACA;;;;;;;;AAlCF;;AAAM;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACJ;;AACE;;AAUA;;AAGF;;AAEA;;AACE;;AASA;;AAGF;;AACA;;AAGA;;AACF;;;;;;;;;;AAvBe;;AAAA;;AAeA;;AAAA;;AAI0C;;AAAA;;AAG1C;;AAAA;;;;QD1BJmC,e;;;AAIX,+BAAmBxC,WAAnB,EAA6C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAHnB,aAAA4B,SAAA,GAAY,KAAZ;AAG+C;;;;mCAEpC;AAAA;;AACT,eAAKC,aAAL,GAAqB,KAAK7B,WAAL,CAClB8B,qBADkB,GAElBC,SAFkB,CAER,UAACC,UAAD,EAAgB;AACzB,kBAAI,CAACJ,SAAL,GAAiB,KAAjB;AACD,WAJkB,CAArB;AAKD;;;iCAEQK,I,EAAc;AACrB,cAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB;AACD;;AACD,eAAKN,SAAL,GAAiB,IAAjB;AACA,eAAK5B,WAAL,CAAiByC,UAAjB,CAA4BR,IAAI,CAACG,KAAL,CAAWC,KAAvC,EAA8CJ,IAAI,CAACG,KAAL,CAAWE,QAAzD;AACD;;;sCAEa;AACZ,eAAKT,aAAL,CAAmBU,WAAnB;AACD;;;;;;;uBAxBUC,e,EAAe,uJ;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,uhB;AAAA;AAAA;ACV5B;;AACE;;AACA;;AAoCF;;;;AArCe;;AAAA;;AAC8C;;AAAA;;;;;;;;;sEDQhDA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTrC,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AEV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACII;;AACE;;AACG;;AAAQ;;AAEb;;;;;;AAEA;;AACE;;AAAgE;;AAAK;;AACvE;;;;;;AACA;;AACE;;AACG;;AAAO;;AAEZ;;;;;;;;AACA;;AACE;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAqB;;AAAM;;AAChD;;;;QDXSqC,e;;;AAGX,+BAAoB1C,WAApB,EAA8C;AAAA;;AAA1B,aAAAA,WAAA,GAAAA,WAAA;AAFpB,aAAA2C,mBAAA,GAAsB,KAAtB;AAEgD;;;;mCAErC;AAAA;;AACT,eAAKA,mBAAL,GAA2B,KAAK3C,WAAL,CAAiByB,SAAjB,EAA3B;AACA,eAAKmB,gBAAL,GAAwB,KAAK5C,WAAL,CACrB8B,qBADqB,GAErBC,SAFqB,CAEX,UAACc,eAAD,EAAqB;AAC9B,kBAAI,CAACF,mBAAL,GAA2BE,eAA3B;AACD,WAJqB,CAAxB;AAKD;;;mCAEU;AACT,eAAK7C,WAAL,CAAiB8C,MAAjB;AACD;;;sCAEa;AACZ,eAAKF,gBAAL,CAAsBL,WAAtB;AACD;;;;;;;uBApBUG,e,EAAe,uJ;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,iW;AAAA;AAAA;ACT5B;;AACE;;AAAM;;AAAkB;;AAAU;;AAAI;;AACtC;;AACA;;AACE;;AAMA;;AAGA;;AAKA;;AAGF;;AACF;;;;AAlBQ;;AAAA;;AAMA;;AAAA;;AAGA;;AAAA;;AAKA;;AAAA;;;;;;;;;sEDTKA,e,EAAe;cAL3B,uDAK2B;eALjB;AACTvC,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AET5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCE;;;;;;AAKI;;AACE;;AACF;;;;;;AASF;;AAIE;;AACF;;;;;;AADO;;AAAA,0JAAoB,KAApB,EAAoB,uBAApB;;;;;;AAWL;;AACG;;AAAoB;;;;;;;;AA/B3B;;AAAyB;AAAA;;AAAA;;AAAA;AAAA;;AACvB;;AAEE;;AACA;;AAGF;;AAEA;;AACE;;AAAyC;AAAA;;AAAA;;AAAA,iBAAS,WAAT;AAA2B,SAA3B;;AACvC;;AACF;;AACA;;AAA+B;AAAA;;AAAA;;AAAA;AAAA;;AAA/B;;AACF;;AACA;;AAOA;;AACE;;AAMA;;AAAA;;AACA;;AAGF;;AACA;;AACE;;AACF;;AACF;;;;;;AArCM;;AAIS;;AAAA;;AAaX;;AAAA;;AAaW;;AAAA;;;;QDnBJ0C,mB;;;AAUX,mCACSC,YADT,EAES1B,KAFT,EAE8B;AAAA;;AADrB,aAAA0B,YAAA,GAAAA,YAAA;AACA,aAAA1B,KAAA,GAAAA,KAAA;AAXT,aAAA2B,YAAA,GAAe,EAAf;AACA,aAAAC,cAAA,GAAiB,EAAjB;AAEA,aAAAtB,SAAA,GAAY,KAAZ;AAGQ,aAAAuB,IAAA,GAAO,QAAP;AAMJ;;;;mCAEO;AAAA;;AACT,eAAKlB,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACxBhC,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AAC3BmD,wBAAU,EAAE,CAAC,0DAAWC,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,CAArB,CAAtB;AADe,aAAtB,CADiB;AAIxBC,mBAAO,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AAC7BH,wBAAU,EAAE,CAAC,0DAAWC,QAAZ;AADiB,aAAtB,CAJe;AAOxBG,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,IAAhB,EAAsB;AAC3BJ,wBAAU,EAAE,CAAC,0DAAWC,QAAZ,CADe;AAE3BI,6BAAe,EAAE,CAAC,wEAAD;AAFU,aAAtB;AAPiB,WAAd,CAAZ;AAaA,eAAKnC,KAAL,CAAWoC,QAAX,CAAoB3B,SAApB,CAA8B,UAAC2B,QAAD,EAAwB;AACpD,gBAAIA,QAAQ,CAACC,GAAT,CAAa,QAAb,CAAJ,EAA4B;AAC1B,oBAAI,CAACR,IAAL,GAAY,MAAZ;AACA,oBAAI,CAACS,MAAL,GAAcF,QAAQ,CAACG,GAAT,CAAa,QAAb,CAAd,CAF0B,CAG1B;;AACA,oBAAI,CAACjC,SAAL,GAAiB,IAAjB;;AACA,oBAAI,CAACoB,YAAL,CAAkBc,OAAlB,CAA0B,MAAI,CAACF,MAA/B,EAAuC7B,SAAvC,CAAiD,UAACgC,QAAD,EAAc;AAC7D;AACA,sBAAI,CAACnC,SAAL,GAAiB,KAAjB;AACA,sBAAI,CAACoC,IAAL,GAAY;AACV3E,oBAAE,EAAE0E,QAAQ,CAACE,GADH;AAEVhE,uBAAK,EAAE8D,QAAQ,CAAC9D,KAFN;AAGVsD,yBAAO,EAAEQ,QAAQ,CAACR,OAHR;AAIVW,2BAAS,EAAEH,QAAQ,CAACG,SAJV;AAKVC,yBAAO,EAAEJ,QAAQ,CAACI;AALR,iBAAZ;;AAOA,sBAAI,CAAClC,IAAL,CAAUmC,QAAV,CAAmB;AACjBnE,uBAAK,EAAE,MAAI,CAAC+D,IAAL,CAAU/D,KADA;AAEjBsD,yBAAO,EAAE,MAAI,CAACS,IAAL,CAAUT,OAFF;AAGjBC,uBAAK,EAAE,MAAI,CAACQ,IAAL,CAAUE;AAHA,iBAAnB;AAKD,eAfD;;AAgBAG,qBAAO,CAACC,GAAR,CAAY,MAAI,CAACN,IAAjB;AACD,aAtBD,MAsBO;AACL,oBAAI,CAACb,IAAL,GAAY,QAAZ;AACA,oBAAI,CAACS,MAAL,GAAc,IAAd;AACD;AACF,WA3BD;AA4BD;;;sCAEaW,K,EAAc;AAAA;;AAC1B,cAAMC,IAAI,GAAID,KAAK,CAACE,MAAN,CAAkCC,KAAlC,CAAwC,CAAxC,CAAd;AACA,eAAKzC,IAAL,CAAU0C,UAAV,CAAqB;AAAEnB,iBAAK,EAAEgB;AAAT,WAArB;AACA,eAAKvC,IAAL,CAAU4B,GAAV,CAAc,OAAd,EAAuBe,sBAAvB;AACA,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,gBAAM,CAACE,MAAP,GAAgB,YAAM;AACpB,kBAAI,CAACC,YAAL,GAAoBH,MAAM,CAACI,MAA3B;AACD,WAFD;;AAGAJ,gBAAM,CAACK,aAAP,CAAqBV,IAArB;AACD;;;qCAEY;AACX,cAAI,KAAKvC,IAAL,CAAUC,OAAd,EAAuB;AACrB;AACD;;AACD,eAAKN,SAAL,GAAiB,IAAjB;;AACA,cAAI,KAAKuB,IAAL,IAAa,QAAjB,EAA2B;AACzB,iBAAKH,YAAL,CAAkBmC,OAAlB,CACE,KAAKlD,IAAL,CAAUG,KAAV,CAAgBnC,KADlB,EAEE,KAAKgC,IAAL,CAAUG,KAAV,CAAgBmB,OAFlB,EAGE,KAAKtB,IAAL,CAAUG,KAAV,CAAgBoB,KAHlB;AAKD,WAND,MAMO;AACL,iBAAKR,YAAL,CAAkBoC,UAAlB,CACE,KAAKxB,MADP,EAEE,KAAK3B,IAAL,CAAUG,KAAV,CAAgBnC,KAFlB,EAGE,KAAKgC,IAAL,CAAUG,KAAV,CAAgBmB,OAHlB,EAIE,KAAKtB,IAAL,CAAUG,KAAV,CAAgBoB,KAJlB;AAMD;;AAED,eAAKvB,IAAL,CAAUoD,KAAV;AACD;;;;;;;uBA3FUtC,mB,EAAmB,0J,EAAA,+H;AAAA,K;;;YAAnBA,mB;AAAmB,sC;AAAA,c;AAAA,a;AAAA,wgB;AAAA;AAAA;ACbhC;;AACE;;AACA;;AAsCF;;;;AAvCe;;AAAA;;AACoC;;AAAA;;;;;;;;;sEDWtCA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACT5C,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,8BAFJ;AAGTC,mBAAS,EAAE,CAAC,6BAAD;AAHF,S;AAKqB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEbhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACAA;;;;;;;;;;;;AAUI;;AACE;;AAAgE;;AAAI;;AACpE;;AAAgC;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAC9B;;AACF;;AACF;;;;;;AAJgB;;AAAA;;;;;;AATlB;;AACE;;AACE;;AAAI;;AAAgB;;AACtB;;AACA;;AACE;;AACF;;AACA;;AAAG;;AAAkB;;AACrB;;AAMF;;;;;;;;AAZQ;;AAAA;;AAGC;;AAAA,yJAAsB,KAAtB,EAAsB,cAAtB;;AAEJ;;AAAA;;AACa;;AAAA;;;;;;AATpB;;AACE;;AAeF;;;;;;AAfuB;;AAAA;;;;;;;;AAgBvB;;AAIE;AAAA;;AAAA;;AAAA;AAAA;;AAED;;;;;;AALC,+FAAqB,UAArB,EAAqB,oBAArB,EAAqB,iBAArB,EAAqB,uBAArB;;;;;;AAMF;;AACE;;AACF;;;;QDdaiF,iB;;;AAYX,iCACStC,YADT,EAEUhD,WAFV,EAEkC;AAAA;;AADzB,aAAAgD,YAAA,GAAAA,YAAA;AACC,aAAAhD,WAAA,GAAAA,WAAA;AAbV,aAAAuF,KAAA,GAAgB,EAAhB;AACA,aAAA3D,SAAA,GAAY,KAAZ;AACA,aAAA4D,UAAA,GAAa,CAAb;AACA,aAAAC,YAAA,GAAe,CAAf;AACA,aAAAC,WAAA,GAAc,CAAd;AACA,aAAAC,eAAA,GAAkB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAlB;AACA,aAAAhD,mBAAA,GAAsB,KAAtB;AAQI;;;;mCAEO;AAAA;;AACT,eAAKf,SAAL,GAAiB,IAAjB;AACA,eAAKoB,YAAL,CAAkB4C,QAAlB,CAA2B,KAAKH,YAAhC,EAA8C,KAAKC,WAAnD;AACA,eAAKG,MAAL,GAAc,KAAK7F,WAAL,CAAiB8F,SAAjB,EAAd;AACA,eAAKC,QAAL,GAAgB,KAAK/C,YAAL,CACbgD,qBADa,GAEbjE,SAFa,CAEH,UAACgC,QAAD,EAAoD;AAC7D,kBAAI,CAACnC,SAAL,GAAiB,KAAjB;AACA,kBAAI,CAAC4D,UAAL,GAAkBzB,QAAQ,CAACkC,SAA3B;AACA,kBAAI,CAACV,KAAL,GAAaxB,QAAQ,CAACwB,KAAtB;AACD,WANa,CAAhB;AAOA,eAAK5C,mBAAL,GAA2B,KAAK3C,WAAL,CAAiByB,SAAjB,EAA3B;AACA,eAAKI,aAAL,GAAqB,KAAK7B,WAAL,CAClB8B,qBADkB,GAElBC,SAFkB,CAER,UAACc,eAAD,EAAqB;AAC9B,kBAAI,CAACF,mBAAL,GAA2BE,eAA3B;AACA,kBAAI,CAACgD,MAAL,GAAc,MAAI,CAAC7F,WAAL,CAAiB8F,SAAjB,EAAd;AACD,WALkB,CAArB;AAMD;;;sCAEaI,Q,EAAqB;AACjC,eAAKtE,SAAL,GAAiB,IAAjB;AACA,eAAK8D,WAAL,GAAmBQ,QAAQ,CAACC,SAAT,GAAqB,CAAxC;AACA,eAAKV,YAAL,GAAoBS,QAAQ,CAACE,QAA7B;AACA,eAAKpD,YAAL,CAAkB4C,QAAlB,CAA2B,KAAKH,YAAhC,EAA8C,KAAKC,WAAnD;AACD;;;iCAEQ9B,M,EAAgB;AAAA;;AACvB,eAAKhC,SAAL,GAAiB,IAAjB;AACA,eAAKoB,YAAL,CAAkBqD,UAAlB,CAA6BzC,MAA7B,EAAqC7B,SAArC,CAA+C,YAAM;AACnD,kBAAI,CAACiB,YAAL,CAAkB4C,QAAlB,CAA2B,MAAI,CAACH,YAAhC,EAA8C,MAAI,CAACC,WAAnD;AACD,WAFD;AAGD;;;sCAEa;AACZ,eAAKK,QAAL,CAAcxD,WAAd;AACA,eAAKV,aAAL,CAAmBU,WAAnB;AACD;;;;;;;uBAtDU+C,iB,EAAiB,mJ,EAAA,uJ;AAAA,K;;;YAAjBA,iB;AAAiB,oC;AAAA,c;AAAA,a;AAAA,ia;AAAA;AAAA;ACb9B;;AACA;;AAiBA;;AAOA;;;;AAzBa;;AACe;;AAAA;;AAsB1B;;AAAA;;AAEmB;;AAAA;;;;;;;;;sEDZRA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACTnF,kBAAQ,EAAE,eADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,2BAAD;AAHF,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEb9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaiG,W;;;AAOX,2BAAoBC,IAApB,EAA8ClF,MAA9C,EAA8D;AAAA;;AAA1C,aAAAkF,IAAA,GAAAA,IAAA;AAA0B,aAAAlF,MAAA,GAAAA,MAAA;AANtC,aAAAwB,eAAA,GAAkB,KAAlB;AAIA,aAAA2D,kBAAA,GAAqB,IAAI,4CAAJ,EAArB;AAEwD;;;;mCAErD;AACT,iBAAO,KAAKC,KAAZ;AACD;;;oCAEW;AACV,iBAAO,KAAK5D,eAAZ;AACD;;;oCAEW;AACV,iBAAO,KAAKgD,MAAZ;AACD;;;gDAEuB;AACtB,iBAAO,KAAKW,kBAAL,CAAwBE,YAAxB,EAAP;AACD;;;mCACUrE,K,EAAeC,Q,EAAkB;AAAA;;AAC1C,cAAMqE,QAAQ,GAAa;AAAEtE,iBAAK,EAAEA,KAAT;AAAgBC,oBAAQ,EAAEA;AAA1B,WAA3B;AACA,eAAKiE,IAAL,CAAUvC,IAAV,CAAe,uCAAf,EAAwD2C,QAAxD,EAAkE5E,SAAlE,CACE,YAAM;AACJ,kBAAI,CAACV,MAAL,CAAYK,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,WAHH,EAIE,UAACkF,KAAD,EAAW;AACT,kBAAI,CAACJ,kBAAL,CAAwB5F,IAAxB,CAA6B,KAA7B;AACD,WANH;AAQD;;;8BAEKyB,K,EAAeC,Q,EAAkB;AAAA;;AACrC,cAAMqE,QAAQ,GAAa;AAAEtE,iBAAK,EAAEA,KAAT;AAAgBC,oBAAQ,EAAEA;AAA1B,WAA3B;AACA,eAAKiE,IAAL,CACGvC,IADH,CAEI,sCAFJ,EAGI2C,QAHJ,EAKG5E,SALH,CAMI,UAAC8E,QAAD,EAAc;AACZ,gBAAMJ,KAAK,GAAGI,QAAQ,CAACJ,KAAvB;AACA,kBAAI,CAACA,KAAL,GAAaA,KAAb;;AACA,gBAAIA,KAAJ,EAAW;AACT,kBAAMK,iBAAiB,GAAGD,QAAQ,CAACE,SAAnC;;AACA,oBAAI,CAACC,YAAL,CAAkBF,iBAAlB;;AACA,oBAAI,CAACjE,eAAL,GAAuB,IAAvB;AACA,oBAAI,CAACgD,MAAL,GAAcgB,QAAQ,CAAChB,MAAvB;;AACA,oBAAI,CAACW,kBAAL,CAAwB5F,IAAxB,CAA6B,IAA7B;;AACA,kBAAMqG,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,kBAAMC,cAAc,GAAG,IAAID,IAAJ,CACrBD,GAAG,CAACG,OAAJ,KAAgBN,iBAAiB,GAAG,IADf,CAAvB;;AAGA,oBAAI,CAACO,YAAL,CAAkBZ,KAAlB,EAAyBU,cAAzB,EAAyC,MAAI,CAACtB,MAA9C;;AACA,oBAAI,CAACxE,MAAL,CAAYK,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;AACF,WAtBL,EAuBI,UAACkF,KAAD,EAAW;AACT,kBAAI,CAACJ,kBAAL,CAAwB5F,IAAxB,CAA6B,KAA7B;AACD,WAzBL;AA2BD;;;uCACc;AACb,cAAM0G,eAAe,GAAG,KAAKC,WAAL,EAAxB;;AACA,cAAI,CAACD,eAAL,EAAsB;AACpB;AACD;;AACD,cAAML,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,cAAMH,SAAS,GAAGO,eAAe,CAACH,cAAhB,CAA+BC,OAA/B,KAA2CH,GAAG,CAACG,OAAJ,EAA7D;;AACA,cAAIL,SAAS,GAAG,CAAhB,EAAmB;AACjB,iBAAKN,KAAL,GAAaa,eAAe,CAACb,KAA7B;AACA,iBAAK5D,eAAL,GAAuB,IAAvB;AACA,iBAAKmE,YAAL,CAAkBD,SAAS,GAAG,IAA9B;AACA,iBAAKP,kBAAL,CAAwB5F,IAAxB,CAA6B,IAA7B;AACD;AACF;;;iCAEQ;AACP,eAAK6F,KAAL,GAAa,IAAb;AACA,eAAK5D,eAAL,GAAuB,KAAvB;AACA,eAAK2D,kBAAL,CAAwB5F,IAAxB,CAA6B,KAA7B;AACA,eAAKiF,MAAL,GAAc,IAAd;AACA2B,sBAAY,CAAC,KAAKC,UAAN,CAAZ;AACA,eAAKC,aAAL;AAEA,eAAKrG,MAAL,CAAYK,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD;;;qCAEoBiG,Q,EAAkB;AAAA;;AACrCtD,iBAAO,CAACC,GAAR,CAAY,kBAAkBqD,QAA9B;AACA,eAAKF,UAAL,GAAkBG,UAAU,CAAC,YAAM;AACjC,mBAAI,CAAC9E,MAAL;AACD,WAF2B,EAEzB6E,QAAQ,GAAG,IAFc,CAA5B;AAGD;;;qCAEoBlB,K,EAAeU,c,EAAsBtB,M,EAAgB;AACxEgC,sBAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AACAoB,sBAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCX,cAAc,CAACY,WAAf,EAAnC;AACAF,sBAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BjC,MAA/B;AACD;;;wCAEuB;AACtBgC,sBAAY,CAACG,UAAb,CAAwB,OAAxB;AACAH,sBAAY,CAACG,UAAb,CAAwB,YAAxB;AACAH,sBAAY,CAACG,UAAb,CAAwB,QAAxB;AACD;;;sCAEqB;AACpB,cAAMvB,KAAK,GAAGoB,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAd;AACA,cAAMd,cAAc,GAAGU,YAAY,CAACI,OAAb,CAAqB,YAArB,CAAvB;AACA,cAAMpC,MAAM,GAAGgC,YAAY,CAACI,OAAb,CAAqB,QAArB,CAAf;;AACA,cAAI,CAACxB,KAAD,IAAU,CAACU,cAAf,EAA+B;AAC7B;AACD;;AACD,iBAAO;AACLV,iBAAK,EAAEA,KADF;AAELU,0BAAc,EAAE,IAAID,IAAJ,CAASC,cAAT,CAFX;AAGLtB,kBAAM,EAAEA;AAHH,WAAP;AAKD;;;;;;;uBA3HUS,W,EAAW,uH,EAAA,8G;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACV4B,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;;;ACVxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWaC,Y;;;AAIX,4BAAoB5B,IAApB,EAA8ClF,MAA9C,EAA8D;AAAA;;AAA1C,aAAAkF,IAAA,GAAAA,IAAA;AAA0B,aAAAlF,MAAA,GAAAA,MAAA;AAHtC,aAAAkE,KAAA,GAAgB,EAAhB;AACA,aAAA6C,YAAA,GAAe,IAAI,4CAAJ,EAAf;AAEwD;;;;iCAEvD3C,Y,EAAsBC,W,EAAqB;AAAA;;AAClD,cAAM2C,WAAW,uBAAgB5C,YAAhB,mBAAqCC,WAArC,CAAjB;AACA,eAAKa,IAAL,CACG1C,GADH,CAEI,oCAAoCwE,WAFxC,EAIE;AAJF,WAKGC,IALH,CAMI,2DAAI,UAACvE,QAAD,EAAc;AAChB;AACA,mBAAO;AACLwB,mBAAK,EAAExB,QAAQ,CAACwB,KAAT,CAAegD,GAAf,CAAmB,UAACvE,IAAD,EAAU;AAClC,uBAAO;AACL/D,uBAAK,EAAE+D,IAAI,CAAC/D,KADP;AAELsD,yBAAO,EAAES,IAAI,CAACT,OAFT;AAGLlE,oBAAE,EAAE2E,IAAI,CAACC,GAHJ;AAILC,2BAAS,EAAEF,IAAI,CAACE,SAJX;AAKLC,yBAAO,EAAEH,IAAI,CAACG;AALT,iBAAP;AAOD,eARM,CADF;AAULqE,sBAAQ,EAAEzE,QAAQ,CAACyE;AAVd,aAAP;AAYD,WAdD,CANJ,EAsBGzG,SAtBH,CAsBa,UAAC0G,mBAAD,EAAyB;AAClC,mBAAI,CAAClD,KAAL,GAAakD,mBAAmB,CAAClD,KAAjC;;AACA,mBAAI,CAAC6C,YAAL,CAAkBxH,IAAlB,CAAuB;AACrB2E,mBAAK,qBAAM,OAAI,CAACA,KAAX,CADgB;AAErBU,uBAAS,EAAEwC,mBAAmB,CAACD;AAFV,aAAvB;AAID,WA5BH;AA6BD;;;gDAEuB;AACtB,iBAAO,KAAKJ,YAAL,CAAkB1B,YAAlB,EAAP;AACD;;;gCAEOrH,E,EAAY;AAClB,iBAAO,KAAKkH,IAAL,CAAU1C,GAAV,CAMJ,qCAAqCxE,EANjC,CAAP;AAOD;;;gCAEOY,K,EAAesD,O,EAAiBC,K,EAAa;AAAA;;AACnD,cAAMO,QAAQ,GAAG,IAAI2E,QAAJ,EAAjB;AACA3E,kBAAQ,CAAC4E,MAAT,CAAgB,OAAhB,EAAyB1I,KAAzB;AACA8D,kBAAQ,CAAC4E,MAAT,CAAgB,SAAhB,EAA2BpF,OAA3B;AACAQ,kBAAQ,CAAC4E,MAAT,CAAgB,OAAhB,EAAyBnF,KAAzB,EAAgCvD,KAAhC;AACA,eAAKsG,IAAL,CACGvC,IADH,CAEI,iCAFJ,EAGID,QAHJ,EAKGhC,SALH,CAKa,UAAC6G,YAAD,EAAkB;AAC3B,mBAAI,CAACvH,MAAL,CAAYK,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,WAPH;AAQD;;;mCAEUrC,E,EAAYY,K,EAAesD,O,EAAiBC,K,EAAsB;AAAA;;AAC3E,cAAIO,QAAJ;;AACA,cAAI,OAAOP,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,oBAAQ,GAAG,IAAI2E,QAAJ,EAAX;AACA3E,oBAAQ,CAAC4E,MAAT,CAAgB,IAAhB,EAAsBtJ,EAAtB;AACA0E,oBAAQ,CAAC4E,MAAT,CAAgB,OAAhB,EAAyB1I,KAAzB;AACA8D,oBAAQ,CAAC4E,MAAT,CAAgB,SAAhB,EAA2BpF,OAA3B;AACAQ,oBAAQ,CAAC4E,MAAT,CAAgB,OAAhB,EAAyBnF,KAAzB,EAAgCvD,KAAhC;AACD,WAND,MAMO;AACL8D,oBAAQ,GAAG;AACT1E,gBAAE,EAAEA,EADK;AAETY,mBAAK,EAAEA,KAFE;AAGTsD,qBAAO,EAAEA,OAHA;AAITW,uBAAS,EAAEV,KAJF;AAKTW,qBAAO,EAAE;AALA,aAAX;AAOD;;AAED,eAAKoC,IAAL,CACGsC,GADH,CACO,qCAAqCxJ,EAD5C,EACgD0E,QADhD,EAEGhC,SAFH,CAEa,UAAC8E,QAAD,EAAc;AACvB,mBAAI,CAACxF,MAAL,CAAYK,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,WAJH;AAKD;;;mCAEUkC,M,EAAgB;AACzB,iBAAO,KAAK2C,IAAL,WAAiB,qCAAqC3C,MAAtD,CAAP;AACD;;;;;;;uBA/FUuE,Y,EAAY,uH,EAAA,8G;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVD,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;ACVzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,QAAMY,QAAQ,GAAG,SAAXA,QAAW,CACtBC,OADsB,EAEmD;AACzE,UAAI,OAAOA,OAAO,CAAC3G,KAAf,KAAyB,QAA7B,EAAuC;AACrC,eAAO,gDAAG,IAAH,CAAP;AACD;;AACD,UAAMoC,IAAI,GAAGuE,OAAO,CAAC3G,KAArB;AACA,UAAM4G,UAAU,GAAG,IAAIlE,UAAJ,EAAnB;;AACAkE,gBAAU,CAACC,SAAX,GAAuB,YAAM,CAAE,CAA/B;;AACA,UAAMC,KAAK,GAAG,gDAAWC,MAAX,CACZ,UAACC,QAAD,EAAgD;AAC9CJ,kBAAU,CAACK,gBAAX,CAA4B,SAA5B,EAAuC,YAAM;AAC3C,cAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeP,UAAU,CAAC/D,MAA1B,EAAgDuE,QAAhD,CACV,CADU,EAEV,CAFU,CAAZ;AAIA,cAAIC,MAAM,GAAG,EAAb;AACA,cAAIC,OAAO,GAAG,KAAd;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnCF,kBAAM,IAAIH,GAAG,CAACK,CAAD,CAAH,CAAOE,QAAP,CAAgB,EAAhB,CAAV;AACD;;AACD,kBAAQJ,MAAR;AACE,iBAAK,UAAL;AACEC,qBAAO,GAAG,IAAV;AACA;;AACF,iBAAK,UAAL;AACA,iBAAK,UAAL;AACA,iBAAK,UAAL;AACA,iBAAK,UAAL;AACA,iBAAK,UAAL;AACEA,qBAAO,GAAG,IAAV;AACA;;AACF;AACEA,qBAAO,GAAG,KAAV;AACA;AAbJ;;AAeA,cAAIA,OAAJ,EAAa;AACXN,oBAAQ,CAACxI,IAAT,CAAc,IAAd;AACD,WAFD,MAEO;AACLwI,oBAAQ,CAACxI,IAAT,CAAc;AAAEkJ,6BAAe,EAAE;AAAnB,aAAd;AACD;;AACDV,kBAAQ,CAACW,QAAT;AACD,SA/BD;AAgCAf,kBAAU,CAACgB,iBAAX,CAA6BxF,IAA7B;AACD,OAnCW,CAAd;AAqCA,aAAO0E,KAAP;AACD,KA/CM;;;;;;;;;;;;;;;;;ACHP;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMe,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAI/F,OAAO,CAACuC,KAAR,CAAcwD,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\r\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\r\nimport { LoginComponent } from \"./auth/login/login.component\";\r\nimport { SignupComponent } from \"./auth/signup/signup.component\";\r\nimport { AuthGuard } from \"./auth/auth.guard\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", component: PostListComponent },\r\n  { path: \"create\", component: PostCreateComponent, canActivate: [AuthGuard] },\r\n  {\r\n    path: \"edit/:postId\",\r\n    component: PostCreateComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n  { path: \"login\", component: LoginComponent },\r\n  { path: \"signup\", component: SignupComponent },\r\n];\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n  providers: [AuthGuard],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { AuthService } from \"./services/auth-service/auth.service\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent implements OnInit {\n  constructor(private authService: AuthService) {}\n  ngOnInit() {\n    this.authService.autoAuthUser();\n  }\n  title = \"koi\";\n}\n","<app-header></app-header>\n<main>\n  <router-outlet> </router-outlet>\n</main>\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatExpansionModule } from \"@angular/material/expansion\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatPaginatorModule } from \"@angular/material/paginator\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\n\nimport { AppComponent } from \"./app.component\";\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\nimport { HeaderComponent } from \"./header/header/header.component\";\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { SignupComponent } from \"./auth/signup/signup.component\";\nimport { LoginComponent } from \"./auth/login/login.component\";\nimport { AuthInterceptor } from \"./auth/aith-interceptor\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostCreateComponent,\n    HeaderComponent,\n    PostListComponent,\n    SignupComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatDialogModule,\n    HttpClientModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n} from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { AuthService } from \"../services/auth-service/auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const authToken = this.authService.getToken();\r\n    const authRequest = req.clone({\r\n      headers: req.headers.set(\"Authorization\", \"Bearer \" + authToken),\r\n    });\r\n\r\n    return next.handle(authRequest);\r\n  }\r\n}\r\n","import {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router,\r\n} from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"../services/auth-service/auth.service\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: import(\"@angular/router\").ActivatedRouteSnapshot,\r\n    state: import(\"@angular/router\").RouterStateSnapshot\r\n  ):\r\n    | boolean\r\n    | import(\"@angular/router\").UrlTree\r\n    | import(\"rxjs\").Observable<boolean | import(\"@angular/router\").UrlTree>\r\n    | Promise<boolean | import(\"@angular/router\").UrlTree> {\r\n    const isAuth = this.authService.getIsAuth();\r\n    if (!isAuth) {\r\n      this.router.navigate([\"/login\"]);\r\n    }\r\n    return isAuth;\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth-service/auth.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"],\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  private authStatusSub: Subscription;\n\n  isLoading = false;\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService\n      .getAuthStatusListener()\n      .subscribe((authStatus) => {\n        this.isLoading = false;\n      });\n  }\n\n  onLogin(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.login(form.value.email, form.value.password);\n  }\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input\n        matInput\n        name=\"email\"\n        ngModel\n        type=\"email\"\n        placeholder=\"E-mail address\"\n        #emailInput=\"ngModel\"\n        required\n        email\n      />\n      <mat-error *ngIf=\"emailInput.invalid\">\n        Please enter a valid email\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        matInput\n        name=\"password\"\n        ngModel\n        type=\"password\"\n        placeholder=\"Password\"\n        #passwordInput=\"ngModel\"\n        required\n      />\n      <mat-error *ngIf=\"passwordInput.invalid\"\n        >Please enter a valid password</mat-error\n      >\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">\n      Login\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  </form>\n</mat-card>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthService } from \"src/app/services/auth-service/auth.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-signup\",\n  templateUrl: \"./signup.component.html\",\n  styleUrls: [\"./signup.component.css\"],\n})\nexport class SignupComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) {}\n\n  ngOnInit() {\n    this.authStatusSub = this.authService\n      .getAuthStatusListener()\n      .subscribe((authStatus) => {\n        this.isLoading = false;\n      });\n  }\n\n  onSignup(form: NgForm) {\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.createUser(form.value.email, form.value.password);\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input\n        matInput\n        name=\"email\"\n        ngModel\n        type=\"email\"\n        placeholder=\"E-mail address\"\n        #emailInput=\"ngModel\"\n        required\n        email\n      />\n      <mat-error *ngIf=\"emailInput.invalid\">\n        Please enter a valid email\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input\n        matInput\n        name=\"password\"\n        ngModel\n        type=\"password\"\n        placeholder=\"Password\"\n        #passwordInput=\"ngModel\"\n        required\n      />\n      <mat-error *ngIf=\"passwordInput.invalid\"\n        >Please enter a valid password</mat-error\n      >\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\" *ngIf=\"!isLoading\">\n      Sign up\n    </button>\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  </form>\n</mat-card>\n","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { AuthService } from \"src/app/services/auth-service/auth.service\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-header\",\n  templateUrl: \"./header.component.html\",\n  styleUrls: [\"./header.component.css\"],\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  userIsAuthenticated = false;\n  private authListenerSubs: Subscription;\n  constructor(private authService: AuthService) {}\n\n  ngOnInit() {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authListenerSubs = this.authService\n      .getAuthStatusListener()\n      .subscribe((isAuthenticated) => {\n        this.userIsAuthenticated = isAuthenticated;\n      });\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n  ngOnDestroy() {\n    this.authListenerSubs.unsubscribe();\n  }\n}\n","<mat-toolbar color=\"primary\">\n  <span><a routerLink=\"/\">MyMessages</a></span>\n  <span class=\"spacer\"></span>\n  <ul>\n    <li *ngIf=\"userIsAuthenticated\">\n      <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\"\n        >New Post</a\n      >\n    </li>\n\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink=\"/login\" routerLinkActive=\"mat-accent\">Login</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink=\"/signup\" routerLinkActive=\"mat-accent\"\n        >Sign Up</a\n      >\n    </li>\n    <li *ngIf=\"userIsAuthenticated\">\n      <button mat-button (click)=\"onLogout()\">Logout</button>\n    </li>\n  </ul>\n</mat-toolbar>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\n\nimport { PostsService } from \"src/app/services/posts-service/posts.service\";\nimport { ActivatedRoute, ParamMap } from \"@angular/router\";\nimport { Post } from \"../post.model\";\nimport { mimeType } from \"../../validators/mime-type.validator\";\n\n@Component({\n  selector: \"app-post-create\",\n  templateUrl: \"./post-create.component.html\",\n  styleUrls: [\"./post-create.component.css\"],\n})\nexport class PostCreateComponent implements OnInit {\n  enteredTitle = \"\";\n  enteredContent = \"\";\n  post: Post;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = \"create\";\n  private postId: string;\n\n  constructor(\n    public postsService: PostsService,\n    public route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)],\n      }),\n      content: new FormControl(null, {\n        validators: [Validators.required],\n      }),\n      image: new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType],\n      }),\n    });\n\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has(\"postId\")) {\n        this.mode = \"edit\";\n        this.postId = paramMap.get(\"postId\");\n        // start loading - show spinner\n        this.isLoading = true;\n        this.postsService.getPost(this.postId).subscribe((postData) => {\n          // stop loading - hide spinner\n          this.isLoading = false;\n          this.post = {\n            id: postData._id,\n            title: postData.title,\n            content: postData.content,\n            imagePath: postData.imagePath,\n            creator: postData.creator,\n          };\n          this.form.setValue({\n            title: this.post.title,\n            content: this.post.content,\n            image: this.post.imagePath,\n          });\n        });\n        console.log(this.post);\n      } else {\n        this.mode = \"create\";\n        this.postId = null;\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({ image: file });\n    this.form.get(\"image\").updateValueAndValidity();\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode == \"create\") {\n      this.postsService.addPost(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image\n      );\n    } else {\n      this.postsService.updatePost(\n        this.postId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image\n      );\n    }\n\n    this.form.reset();\n  }\n}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <!-- putting ? in ngModel template will force angualr to check if post exists and populate with nothing   -->\n      <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Title\" />\n      <mat-error *ngIf=\"form.get('title').invalid\">\n        Please enter a post title\n      </mat-error>\n    </mat-form-field>\n\n    <div>\n      <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">\n        Pick Image\n      </button>\n      <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\" />\n    </div>\n    <div\n      class=\"image-preview\"\n      *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\"\n    >\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\" />\n    </div>\n\n    <mat-form-field>\n      <textarea\n        matInput\n        rows=\"4\"\n        formControlName=\"content\"\n        placeholder=\"Content\"\n      >\n      </textarea>\n      <mat-error *ngIf=\"form.get('content').invalid\"\n        >Please enter content</mat-error\n      >\n    </mat-form-field>\n    <button mat-raised-button color=\"accent\" type=\"submit\">\n      Save post\n    </button>\n  </form>\n</mat-card>\n","import { Component, OnInit, Input, OnDestroy } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\n\nimport { Post } from \"../post.model\";\nimport { PostsService } from \"../../services/posts-service/posts.service\";\nimport { PageEvent } from \"@angular/material/paginator\";\nimport { AuthService } from \"src/app/services/auth-service/auth.service\";\n\n@Component({\n  selector: \"app-post-list\",\n  templateUrl: \"./post-list.component.html\",\n  styleUrls: [\"./post-list.component.css\"],\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 2;\n  currentPage = 1;\n  pageSizeOptions = [1, 2, 5, 10];\n  userIsAuthenticated = false;\n  userId: string;\n  private postsSub: Subscription;\n  private authStatusSub: Subscription;\n\n  constructor(\n    public postsService: PostsService,\n    private authService: AuthService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.postsService.getPosts(this.postsPerPage, this.currentPage);\n    this.userId = this.authService.getUserId();\n    this.postsSub = this.postsService\n      .getPostUpdateListener()\n      .subscribe((postData: { posts: Post[]; postCount: number }) => {\n        this.isLoading = false;\n        this.totalPosts = postData.postCount;\n        this.posts = postData.posts;\n      });\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authStatusSub = this.authService\n      .getAuthStatusListener()\n      .subscribe((isAuthenticated) => {\n        this.userIsAuthenticated = isAuthenticated;\n        this.userId = this.authService.getUserId();\n      });\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true;\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPosts(this.postsPerPage, this.currentPage);\n  }\n\n  onDelete(postId: string) {\n    this.isLoading = true;\n    this.postsService.deletePost(postId).subscribe(() => {\n      this.postsService.getPosts(this.postsPerPage, this.currentPage);\n    });\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n}\n","<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let post of posts\">\n    <mat-expansion-panel-header>\n      <h3>{{ post.title }}</h3>\n    </mat-expansion-panel-header>\n    <div class=\"post-image\">\n      <img [src]=\"post.imagePath\" [alt]=\"post.title\" />\n    </div>\n    <p>{{ post.content }}</p>\n    <mat-action-row *ngIf=\"userIsAuthenticated && userId === post.creator\">\n      <a mat-button [routerLink]=\"['/edit', post.id]\" color=\"primary\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(post.id)\">\n        DELETE\n      </button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator\n  [length]=\"totalPosts\"\n  [pageSize]=\"postsPerPage\"\n  [pageSizeOptions]=\"pageSizeOptions\"\n  (page)=\"onChangedPage($event)\"\n  *ngIf=\"posts.length > 0\"\n></mat-paginator>\n<p class=\"info-text\" *ngIf=\"posts.length <= 0 && !isLoading\">\n  no posts added yet\n</p>\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { AuthData } from \"src/app/auth/auth-data.model\";\nimport { Token } from \"@angular/compiler/src/ml_parser/lexer\";\nimport { Subject } from \"rxjs\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  private token: string;\n  private tokenTimer: any;\n  private userId: string;\n  private authStatusListener = new Subject<boolean>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getToken() {\n    return this.token;\n  }\n\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n  createUser(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password };\n    this.http.post(\"http://localhost:3000/api/user/signup\", authData).subscribe(\n      () => {\n        this.router.navigate([\"/\"]);\n      },\n      (error) => {\n        this.authStatusListener.next(false);\n      }\n    );\n  }\n\n  login(email: string, password: string) {\n    const authData: AuthData = { email: email, password: password };\n    this.http\n      .post<{ token: string; expiresIn: number; userId: string }>(\n        \"http://localhost:3000/api/user/login\",\n        authData\n      )\n      .subscribe(\n        (response) => {\n          const token = response.token;\n          this.token = token;\n          if (token) {\n            const expiresInDuration = response.expiresIn;\n            this.setAuthTimer(expiresInDuration);\n            this.isAuthenticated = true;\n            this.userId = response.userId;\n            this.authStatusListener.next(true);\n            const now = new Date();\n            const expirationDate = new Date(\n              now.getTime() + expiresInDuration * 1000\n            );\n            this.saveAuthData(token, expirationDate, this.userId);\n            this.router.navigate([\"/\"]);\n          }\n        },\n        (error) => {\n          this.authStatusListener.next(false);\n        }\n      );\n  }\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    if (!authInformation) {\n      return;\n    }\n    const now = new Date();\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.setAuthTimer(expiresIn / 1000);\n      this.authStatusListener.next(true);\n    }\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n\n    this.router.navigate([\"/\"]);\n  }\n\n  private setAuthTimer(duration: number) {\n    console.log(\"Setting timer\" + duration);\n    this.tokenTimer = setTimeout(() => {\n      this.logout;\n    }, duration * 1000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n    localStorage.setItem(\"userId\", userId);\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n    localStorage.removeItem(\"userId\");\n  }\n\n  private getAuthData() {\n    const token = localStorage.getItem(\"token\");\n    const expirationDate = localStorage.getItem(\"expiration\");\n    const userId = localStorage.getItem(\"userId\");\n    if (!token || !expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate),\n      userId: userId,\n    };\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\n\nimport { Post } from \"../../posts/post.model\";\nimport { Router } from \"@angular/router\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{ posts: Post[]; postCount: number }>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getPosts(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http\n      .get<{ message: string; posts: any; maxPosts: number }>(\n        \"http://localhost:3000/api/posts\" + queryParams\n      )\n      // adding a pipe that uses rxjs map function - creating an observable\n      .pipe(\n        map((postData) => {\n          // using javascripts map function going through the array and changing the _id to id\n          return {\n            posts: postData.posts.map((post) => {\n              return {\n                title: post.title,\n                content: post.content,\n                id: post._id,\n                imagePath: post.imagePath,\n                creator: post.creator,\n              };\n            }),\n            maxPosts: postData.maxPosts,\n          };\n        })\n      )\n      .subscribe((transformedPostData) => {\n        this.posts = transformedPostData.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts,\n        });\n      });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{\n      _id: string;\n      title: string;\n      content: string;\n      imagePath: string;\n      creator: string;\n    }>(\"http://localhost:3000/api/posts/\" + id);\n  }\n\n  addPost(title: string, content: string, image: File) {\n    const postData = new FormData();\n    postData.append(\"title\", title);\n    postData.append(\"content\", content);\n    postData.append(\"image\", image, title);\n    this.http\n      .post<{ message: string; post: Post }>(\n        \"http://localhost:3000/api/posts\",\n        postData\n      )\n      .subscribe((responseData) => {\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  updatePost(id: string, title: string, content: string, image: File | string) {\n    let postData: Post | FormData;\n    if (typeof image === \"object\") {\n      postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"image\", image, title);\n    } else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image,\n        creator: null,\n      };\n    }\n\n    this.http\n      .put(\"http://localhost:3000/api/posts/\" + id, postData)\n      .subscribe((response) => {\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  deletePost(postId: string) {\n    return this.http.delete(\"http://localhost:3000/api/posts/\" + postId);\n  }\n}\n","import { AbstractControl } from \"@angular/forms\";\r\nimport { Observable, Observer, of } from \"rxjs\";\r\n\r\nexport const mimeType = (\r\n  control: AbstractControl\r\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\r\n  if (typeof control.value === \"string\") {\r\n    return of(null);\r\n  }\r\n  const file = control.value as File;\r\n  const fileReader = new FileReader();\r\n  fileReader.onloadend = () => {};\r\n  const frObs = Observable.create(\r\n    (observer: Observer<{ [key: string]: any }>) => {\r\n      fileReader.addEventListener(\"loadend\", () => {\r\n        const arr = new Uint8Array(fileReader.result as Uint8Array).subarray(\r\n          0,\r\n          4\r\n        );\r\n        let header = \"\";\r\n        let isValid = false;\r\n        for (let i = 0; i < arr.length; i++) {\r\n          header += arr[i].toString(16);\r\n        }\r\n        switch (header) {\r\n          case \"89504e47\":\r\n            isValid = true;\r\n            break;\r\n          case \"ffd8ffe0\":\r\n          case \"ffd8ffe1\":\r\n          case \"ffd8ffe2\":\r\n          case \"ffd8ffe3\":\r\n          case \"ffd8ffe8\":\r\n            isValid = true;\r\n            break;\r\n          default:\r\n            isValid = false;\r\n            break;\r\n        }\r\n        if (isValid) {\r\n          observer.next(null);\r\n        } else {\r\n          observer.next({ invalidMimeType: true });\r\n        }\r\n        observer.complete();\r\n      });\r\n      fileReader.readAsArrayBuffer(file);\r\n    }\r\n  );\r\n  return frObs;\r\n};\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}